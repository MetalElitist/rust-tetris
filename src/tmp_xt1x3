use ggez;
use ggez::graphics;
use ggez::nalgebra as na;
use ggez::mint::{Point2};
use ggez::{Context, GameResult};
use ggez::input::keyboard;
use ggez::event::{KeyCode, KeyMods};
use ggez::event;

const grid_w

struct MainState {
	grid: [[i32; 30]; 30]
}

impl MainState {
	fn new() -> GameResult<MainState> {
		Ok(MainState{
			grid: [[0;30];30]
		})
	}
}

impl event::EventHandler for MainState {
	fn update(&mut self, ctx: &mut Context) -> GameResult {

		Ok(())
	}

	fn draw(&mut self, ctx: &mut Context) -> GameResult {
		let i32: i = 0;
		Ok(())
	}

	fn key_down_event(&mut self, ctx: &mut Context, key: KeyCode, mods: KeyMods, _: bool) {

	}
}

fn main() -> GameResult {
	let window = ggez::conf::WindowSetup {
		title: "Snake".to_owned(),
		samples: ggez::conf::NumSamples::Zero,
		vsync: false,
		icon: "".to_owned(),
		srgb: true,
	};

	let windowmode = ggez::conf::WindowMode {
		width: 1200f32,
		height: 1200f32/1.7f32,
		maximized: false,
		fullscreen_type: ggez::conf::FullscreenType::Windowed,
		borderless: false,
		min_width: 0.0,
		max_width: 0.0,
		min_height: 0.0,
		max_height: 0.0,
		resizable: false,
	};

	let conf = ggez::conf::Conf {
		window_mode: windowmode,
		window_setup: window,
		backend: ggez::conf::Backend::default(),
		modules: ggez::conf::ModuleConf::default(),
	};

	let cb = ggez::ContextBuilder::new("super_simple", "ggez").conf(conf);
	let (ref mut ctx, event_loop) = &mut cb.build()?;
	let state = &mut MainState::new()?;
	event::run(ctx, event_loop, state)
}
